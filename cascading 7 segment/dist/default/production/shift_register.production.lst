

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sun Nov 18 05:59:44 2018

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0007                     	;# 
    25  0008                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  000E                     	;# 
    33  000F                     	;# 
    34  0010                     	;# 
    35  0011                     	;# 
    36  0012                     	;# 
    37  0013                     	;# 
    38  0014                     	;# 
    39  0015                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0017                     	;# 
    43  0018                     	;# 
    44  0019                     	;# 
    45  001A                     	;# 
    46  001B                     	;# 
    47  001B                     	;# 
    48  001C                     	;# 
    49  001D                     	;# 
    50  001E                     	;# 
    51  001F                     	;# 
    52  0081                     	;# 
    53  0085                     	;# 
    54  0086                     	;# 
    55  0087                     	;# 
    56  0088                     	;# 
    57  0089                     	;# 
    58  008C                     	;# 
    59  008D                     	;# 
    60  008E                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0093                     	;# 
    64  0094                     	;# 
    65  0098                     	;# 
    66  0099                     	;# 
    67  009C                     	;# 
    68  009D                     	;# 
    69  009E                     	;# 
    70  009F                     	;# 
    71  010C                     	;# 
    72  010D                     	;# 
    73  010E                     	;# 
    74  010F                     	;# 
    75  018C                     	;# 
    76  018D                     	;# 
    77                           
    78                           	psect	strings
    79  0003                     __pstrings:	
    80  0003                     stringtab:	
    81  0003                     __stringtab:	
    82  0003                     stringcode:	
    83                           ;	String table - string pointers are 1 byte each
    84                           
    85  0003                     stringdir:	
    86  0003  3000               	movlw	high stringdir
    87  0004  008A               	movwf	10
    88  0005  0804               	movf	4,w
    89  0006  0A84               	incf	4,f
    90  0007  0782               	addwf	2,f
    91  0008                     __stringbase:	
    92  0008  3400               	retlw	0
    93  0009                     __end_of__stringtab:	
    94  0009                     _SEGMENT_COMMONA:	
    95  0009  34C0               	retlw	192
    96  000A  34F9               	retlw	249
    97  000B  34A4               	retlw	164
    98  000C  34B0               	retlw	176
    99  000D  3499               	retlw	153
   100  000E  3492               	retlw	146
   101  000F  3482               	retlw	130
   102  0010  34F8               	retlw	248
   103  0011  3480               	retlw	128
   104  0012  3490               	retlw	144
   105  0013                     __end_of_SEGMENT_COMMONA:	
   106  0013                     _SEGMENT_COMMONC:	
   107  0013  343F               	retlw	63
   108  0014  3406               	retlw	6
   109  0015  345B               	retlw	91
   110  0016  344F               	retlw	79
   111  0017  3466               	retlw	102
   112  0018  346D               	retlw	109
   113  0019  347D               	retlw	125
   114  001A  3407               	retlw	7
   115  001B  347F               	retlw	127
   116  001C  346F               	retlw	111
   117  001D                     __end_of_SEGMENT_COMMONC:	
   118  0008                     _PORTD	set	8
   119  0008                     _PORTDbits	set	8
   120  0088                     _TRISD	set	136
   121                           
   122                           ; #config settings
   123  0000                     
   124                           	psect	cinit
   125  07FC                     start_initialization:	
   126  07FC                     __initialization:	
   127  07FC                     end_of_initialization:	
   128                           ;End of C runtime variable initialization code
   129                           
   130  07FC                     __end_of__initialization:	
   131  07FC  0183               	clrf	3
   132  07FD  120A  118A  2E9D   	ljmp	_main	;jump to C main() function
   133                           
   134                           	psect	cstackCOMMON
   135  0070                     __pcstackCOMMON:	
   136  0070                     ?_clock:	
   137  0070                     ??_clock:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  0070                     ?_Latch:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  0070                     ??_Latch:	
   144                           ; 1 bytes @ 0x0
   145                           
   146  0070                     ?_Serial_write:	
   147                           ; 1 bytes @ 0x0
   148                           
   149  0070                     ?_Seven_Segment:	
   150                           ; 1 bytes @ 0x0
   151                           
   152  0070                     ??_Seven_Segment:	
   153                           ; 1 bytes @ 0x0
   154                           
   155  0070                     ?_main:	
   156                           ; 1 bytes @ 0x0
   157                           
   158  0070                     ?___awdiv:	
   159                           ; 1 bytes @ 0x0
   160                           
   161  0070                     ?___awmod:	
   162                           ; 2 bytes @ 0x0
   163                           
   164  0070                     Seven_Segment@x:	
   165                           ; 2 bytes @ 0x0
   166                           
   167  0070                     ___awdiv@divisor:	
   168                           ; 1 bytes @ 0x0
   169                           
   170  0070                     ___awmod@divisor:	
   171                           ; 2 bytes @ 0x0
   172                           
   173                           
   174                           ; 2 bytes @ 0x0
   175  0070                     	ds	2
   176  0072                     ??_Serial_write:	
   177  0072                     ___awdiv@dividend:	
   178                           ; 1 bytes @ 0x2
   179                           
   180  0072                     ___awmod@dividend:	
   181                           ; 2 bytes @ 0x2
   182                           
   183                           
   184                           ; 2 bytes @ 0x2
   185  0072                     	ds	2
   186  0074                     ??___awdiv:	
   187  0074                     ??___awmod:	
   188                           ; 1 bytes @ 0x4
   189                           
   190                           
   191                           ; 1 bytes @ 0x4
   192  0074                     	ds	1
   193  0075                     ___awdiv@counter:	
   194  0075                     ___awmod@counter:	
   195                           ; 1 bytes @ 0x5
   196                           
   197                           
   198                           ; 1 bytes @ 0x5
   199  0075                     	ds	1
   200  0076                     Serial_write@value:	
   201  0076                     ___awdiv@sign:	
   202                           ; 1 bytes @ 0x6
   203                           
   204  0076                     ___awmod@sign:	
   205                           ; 1 bytes @ 0x6
   206                           
   207                           
   208                           ; 1 bytes @ 0x6
   209  0076                     	ds	1
   210  0077                     Serial_write@bitsent:	
   211  0077                     ___awdiv@quotient:	
   212                           ; 1 bytes @ 0x7
   213                           
   214                           
   215                           ; 2 bytes @ 0x7
   216  0077                     	ds	1
   217  0078                     Serial_write@i:	
   218                           
   219                           ; 1 bytes @ 0x8
   220  0078                     	ds	1
   221  0079                     ?_display:	
   222  0079                     display@number:	
   223                           ; 1 bytes @ 0x9
   224                           
   225                           
   226                           ; 2 bytes @ 0x9
   227  0079                     	ds	2
   228  007B                     display@displayno:	
   229                           
   230                           ; 1 bytes @ 0xB
   231  007B                     	ds	1
   232  007C                     ??_display:	
   233                           
   234                           ; 1 bytes @ 0xC
   235  007C                     	ds	2
   236                           
   237                           	psect	cstackBANK0
   238  0020                     __pcstackBANK0:	
   239  0020                     display@myarray:	
   240                           
   241                           ; 10 bytes @ 0x0
   242  0020                     	ds	10
   243  002A                     display@val:	
   244                           
   245                           ; 1 bytes @ 0xA
   246  002A                     	ds	1
   247  002B                     display@data:	
   248                           
   249                           ; 1 bytes @ 0xB
   250  002B                     	ds	1
   251  002C                     display@j:	
   252                           
   253                           ; 2 bytes @ 0xC
   254  002C                     	ds	2
   255  002E                     display@k:	
   256                           
   257                           ; 2 bytes @ 0xE
   258  002E                     	ds	2
   259  0030                     display@i:	
   260                           
   261                           ; 1 bytes @ 0x10
   262  0030                     	ds	1
   263  0031                     ??_main:	
   264                           
   265                           ; 1 bytes @ 0x11
   266  0031                     	ds	1
   267  0032                     main@x:	
   268                           
   269                           ; 2 bytes @ 0x12
   270  0032                     	ds	2
   271                           
   272                           	psect	maintext
   273  069D                     __pmaintext:	
   274 ;;
   275 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   276 ;;
   277 ;; *************** function _main *****************
   278 ;; Defined at:
   279 ;;		line 79 in file "C:/Users/systematic/Documents/embedded_project/XC8/mine/shift_register/SHIFT.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;  x               2   18[BANK0 ] int 
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   288 ;; Tracked objects:
   289 ;;		On entry : B00/0
   290 ;;		On exit  : 0/0
   291 ;;		Unchanged: 0/0
   292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   293 ;;      Params:         0       0       0       0       0
   294 ;;      Locals:         0       2       0       0       0
   295 ;;      Temps:          0       1       0       0       0
   296 ;;      Totals:         0       3       0       0       0
   297 ;;Total ram usage:        3 bytes
   298 ;; Hardware stack levels required when called:    3
   299 ;; This function calls:
   300 ;;		_display
   301 ;; This function is called by:
   302 ;;		Startup code after reset
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           
   307                           ;psect for function _main
   308  069D                     _main:	
   309                           
   310                           ;SHIFT.c: 80: TRISD = 0x00;
   311                           
   312                           ;incstack = 0
   313                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   314  069D  1683               	bsf	3,5	;RP0=1, select bank1
   315  069E  1303               	bcf	3,6	;RP1=0, select bank1
   316  069F  0188               	clrf	8	;volatile
   317                           
   318                           ;SHIFT.c: 81: PORTD = 0x00;
   319  06A0  1283               	bcf	3,5	;RP0=0, select bank0
   320  06A1  1303               	bcf	3,6	;RP1=0, select bank0
   321  06A2  0188               	clrf	8	;volatile
   322  06A3                     l41:	
   323                           ;SHIFT.c: 82: while(1){
   324                           
   325                           
   326                           ;SHIFT.c: 83: for(int x=0;x<500;x++){
   327  06A3  1283               	bcf	3,5	;RP0=0, select bank0
   328  06A4  1303               	bcf	3,6	;RP1=0, select bank0
   329  06A5  01B2               	clrf	main@x
   330  06A6  01B3               	clrf	main@x+1
   331  06A7                     L1:	
   332  06A7  0833               	movf	main@x+1,w
   333  06A8  3A80               	xorlw	128
   334  06A9  00FF               	movwf	127
   335  06AA  3081               	movlw	129
   336  06AB  027F               	subwf	127,w
   337  06AC  1D03               	skipz
   338  06AD  2EB0               	goto	u575
   339  06AE  30F4               	movlw	244
   340  06AF  0232               	subwf	main@x,w
   341  06B0                     u575:	
   342  06B0  1803               	btfsc	3,0
   343  06B1  2EA3               	goto	l41
   344                           
   345                           ;SHIFT.c: 84: display(x,4);
   346  06B2  1283               	bcf	3,5	;RP0=0, select bank0
   347  06B3  1303               	bcf	3,6	;RP1=0, select bank0
   348  06B4  0833               	movf	main@x+1,w
   349  06B5  00FA               	movwf	display@number+1
   350  06B6  0832               	movf	main@x,w
   351  06B7  00F9               	movwf	display@number
   352  06B8  3004               	movlw	4
   353  06B9  00B1               	movwf	??_main
   354  06BA  0831               	movf	??_main,w
   355  06BB  00FB               	movwf	display@displayno
   356  06BC  120A  118A  276E  120A  118A  	fcall	_display
   357  06C1  3001               	movlw	1
   358  06C2  1283               	bcf	3,5	;RP0=0, select bank0
   359  06C3  1303               	bcf	3,6	;RP1=0, select bank0
   360  06C4  07B2               	addwf	main@x,f
   361  06C5  1803               	skipnc
   362  06C6  0AB3               	incf	main@x+1,f
   363  06C7  3000               	movlw	0
   364  06C8  07B3               	addwf	main@x+1,f
   365  06C9  2EA7               	goto	L1
   366  06CA                     __end_of_main:	
   367                           
   368                           	psect	text1
   369  076E                     __ptext1:	
   370 ;; *************** function _display *****************
   371 ;; Defined at:
   372 ;;		line 53 in file "C:/Users/systematic/Documents/embedded_project/XC8/mine/shift_register/SHIFT.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;  number          2    9[COMMON] int 
   375 ;;  displayno       1   11[COMMON] unsigned char 
   376 ;; Auto vars:     Size  Location     Type
   377 ;;  k               2   14[BANK0 ] int 
   378 ;;  j               2   12[BANK0 ] int 
   379 ;;  myarray        10    0[BANK0 ] unsigned char [10]
   380 ;;  i               1   16[BANK0 ] unsigned char 
   381 ;;  data            1   11[BANK0 ] unsigned char 
   382 ;;  val             1   10[BANK0 ] unsigned char 
   383 ;; Return value:  Size  Location     Type
   384 ;;                  1    wreg      void 
   385 ;; Registers used:
   386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   392 ;;      Params:         3       0       0       0       0
   393 ;;      Locals:         0      17       0       0       0
   394 ;;      Temps:          2       0       0       0       0
   395 ;;      Totals:         5      17       0       0       0
   396 ;;Total ram usage:       22 bytes
   397 ;; Hardware stack levels used:    1
   398 ;; Hardware stack levels required when called:    2
   399 ;; This function calls:
   400 ;;		_Latch
   401 ;;		_Serial_write
   402 ;;		_Seven_Segment
   403 ;;		___awdiv
   404 ;;		___awmod
   405 ;; This function is called by:
   406 ;;		_main
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           
   411                           ;psect for function _display
   412  076E                     _display:	
   413                           
   414                           ;SHIFT.c: 54: char myarray[10];
   415                           ;SHIFT.c: 55: char val;
   416                           ;SHIFT.c: 56: char i=0;
   417                           
   418                           ;incstack = 0
   419                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   420  076E  1283               	bcf	3,5	;RP0=0, select bank0
   421  076F  1303               	bcf	3,6	;RP1=0, select bank0
   422  0770  01B0               	clrf	display@i
   423                           
   424                           ;SHIFT.c: 57: char data=0;
   425  0771  01AB               	clrf	display@data
   426  0772                     l792:	
   427                           ;SHIFT.c: 58: while(number){
   428                           
   429  0772  0879               	movf	display@number,w
   430  0773  047A               	iorwf	display@number+1,w
   431  0774  1903               	btfsc	3,2
   432  0775  2FA7               	goto	l794
   433                           
   434                           ;SHIFT.c: 59: val = number % 10;
   435  0776  300A               	movlw	10
   436  0777  00F0               	movwf	___awmod@divisor
   437  0778  3000               	movlw	0
   438  0779  00F1               	movwf	___awmod@divisor+1
   439  077A  087A               	movf	display@number+1,w
   440  077B  00F3               	movwf	___awmod@dividend+1
   441  077C  0879               	movf	display@number,w
   442  077D  00F2               	movwf	___awmod@dividend
   443  077E  120A  118A  26CA  120A  118A  	fcall	___awmod
   444  0783  0870               	movf	?___awmod,w
   445  0784  00FC               	movwf	??_display
   446  0785  087C               	movf	??_display,w
   447  0786  1283               	bcf	3,5	;RP0=0, select bank0
   448  0787  1303               	bcf	3,6	;RP1=0, select bank0
   449  0788  00AA               	movwf	display@val
   450                           
   451                           ;SHIFT.c: 60: myarray[i]= val;
   452  0789  082A               	movf	display@val,w
   453  078A  00FC               	movwf	??_display
   454  078B  0830               	movf	display@i,w
   455  078C  3E20               	addlw	(low (display@myarray| 0))& (0+255)
   456  078D  0084               	movwf	4
   457  078E  087C               	movf	??_display,w
   458  078F  1383               	bcf	3,7	;select IRP bank0
   459  0790  0080               	movwf	0
   460                           
   461                           ;SHIFT.c: 61: ++i;
   462  0791  3001               	movlw	1
   463  0792  00FC               	movwf	??_display
   464  0793  087C               	movf	??_display,w
   465  0794  07B0               	addwf	display@i,f
   466                           
   467                           ;SHIFT.c: 62: number = (number/10);
   468  0795  300A               	movlw	10
   469  0796  00F0               	movwf	___awdiv@divisor
   470  0797  3000               	movlw	0
   471  0798  00F1               	movwf	___awdiv@divisor+1
   472  0799  087A               	movf	display@number+1,w
   473  079A  00F3               	movwf	___awdiv@dividend+1
   474  079B  0879               	movf	display@number,w
   475  079C  00F2               	movwf	___awdiv@dividend
   476  079D  120A  118A  2715  120A  118A  	fcall	___awdiv
   477  07A2  0871               	movf	?___awdiv+1,w
   478  07A3  00FA               	movwf	display@number+1
   479  07A4  0870               	movf	?___awdiv,w
   480  07A5  00F9               	movwf	display@number
   481  07A6  2F72               	goto	l792
   482  07A7                     l794:	
   483                           
   484                           ;SHIFT.c: 63: }
   485                           ;SHIFT.c: 64: for (int j=i;j<displayno;j++){
   486  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   487  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   488  07A9  0830               	movf	display@i,w
   489  07AA  00FC               	movwf	??_display
   490  07AB  01FD               	clrf	??_display+1
   491  07AC  087C               	movf	??_display,w
   492  07AD  00AC               	movwf	display@j
   493  07AE  087D               	movf	??_display+1,w
   494  07AF  00AD               	movwf	display@j+1
   495  07B0                     l800:	
   496  07B0  082D               	movf	display@j+1,w
   497  07B1  3A80               	xorlw	128
   498  07B2  00FC               	movwf	??_display
   499  07B3  3080               	movlw	128
   500  07B4  027C               	subwf	??_display,w
   501  07B5  1D03               	skipz
   502  07B6  2FB9               	goto	u555
   503  07B7  087B               	movf	display@displayno,w
   504  07B8  022C               	subwf	display@j,w
   505  07B9                     u555:	
   506  07B9  1803               	btfsc	3,0
   507  07BA  2FC9               	goto	l802
   508                           
   509                           ;SHIFT.c: 65: myarray[j]=0;
   510  07BB  1283               	bcf	3,5	;RP0=0, select bank0
   511  07BC  1303               	bcf	3,6	;RP1=0, select bank0
   512  07BD  082C               	movf	display@j,w
   513  07BE  3E20               	addlw	(low (display@myarray| 0))& (0+255)
   514  07BF  0084               	movwf	4
   515  07C0  1383               	bcf	3,7	;select IRP bank0
   516  07C1  0180               	clrf	0
   517  07C2  3001               	movlw	1
   518  07C3  07AC               	addwf	display@j,f
   519  07C4  1803               	skipnc
   520  07C5  0AAD               	incf	display@j+1,f
   521  07C6  3000               	movlw	0
   522  07C7  07AD               	addwf	display@j+1,f
   523  07C8  2FB0               	goto	l800
   524  07C9                     l802:	
   525                           
   526                           ;SHIFT.c: 66: }
   527                           ;SHIFT.c: 67: for (int k=0;k<displayno;k++){
   528  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   529  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   530  07CB  01AE               	clrf	display@k
   531  07CC  01AF               	clrf	display@k+1
   532  07CD                     l810:	
   533  07CD  082F               	movf	display@k+1,w
   534  07CE  3A80               	xorlw	128
   535  07CF  00FC               	movwf	??_display
   536  07D0  3080               	movlw	128
   537  07D1  027C               	subwf	??_display,w
   538  07D2  1D03               	skipz
   539  07D3  2FD6               	goto	u565
   540  07D4  087B               	movf	display@displayno,w
   541  07D5  022E               	subwf	display@k,w
   542  07D6                     u565:	
   543  07D6  1803               	btfsc	3,0
   544  07D7  2FF8               	goto	l812
   545                           
   546                           ;SHIFT.c: 68: data = Seven_Segment(myarray[k]);
   547  07D8  1283               	bcf	3,5	;RP0=0, select bank0
   548  07D9  1303               	bcf	3,6	;RP1=0, select bank0
   549  07DA  082E               	movf	display@k,w
   550  07DB  3E20               	addlw	(low (display@myarray| 0))& (0+255)
   551  07DC  0084               	movwf	4
   552  07DD  1383               	bcf	3,7	;select IRP bank0
   553  07DE  0800               	movf	0,w
   554  07DF  120A  118A  263D  120A  118A  	fcall	_Seven_Segment
   555  07E4  00FC               	movwf	??_display
   556  07E5  087C               	movf	??_display,w
   557  07E6  1283               	bcf	3,5	;RP0=0, select bank0
   558  07E7  1303               	bcf	3,6	;RP1=0, select bank0
   559  07E8  00AB               	movwf	display@data
   560                           
   561                           ;SHIFT.c: 69: Serial_write(data);
   562  07E9  082B               	movf	display@data,w
   563  07EA  120A  118A  2673  120A  118A  	fcall	_Serial_write
   564  07EF  3001               	movlw	1
   565  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   566  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   567  07F2  07AE               	addwf	display@k,f
   568  07F3  1803               	skipnc
   569  07F4  0AAF               	incf	display@k+1,f
   570  07F5  3000               	movlw	0
   571  07F6  07AF               	addwf	display@k+1,f
   572  07F7  2FCD               	goto	l810
   573  07F8                     l812:	
   574                           
   575                           ;SHIFT.c: 70: }
   576                           ;SHIFT.c: 72: Latch();
   577  07F8  120A  118A  2645   	fcall	_Latch
   578  07FB  0008               	return
   579  07FC                     __end_of_display:	
   580                           
   581                           	psect	text2
   582  06CA                     __ptext2:	
   583 ;; *************** function ___awmod *****************
   584 ;; Defined at:
   585 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
   586 ;; Parameters:    Size  Location     Type
   587 ;;  divisor         2    0[COMMON] int 
   588 ;;  dividend        2    2[COMMON] int 
   589 ;; Auto vars:     Size  Location     Type
   590 ;;  sign            1    6[COMMON] unsigned char 
   591 ;;  counter         1    5[COMMON] unsigned char 
   592 ;; Return value:  Size  Location     Type
   593 ;;                  2    0[COMMON] int 
   594 ;; Registers used:
   595 ;;		wreg, status,2, status,0
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   601 ;;      Params:         4       0       0       0       0
   602 ;;      Locals:         2       0       0       0       0
   603 ;;      Temps:          1       0       0       0       0
   604 ;;      Totals:         7       0       0       0       0
   605 ;;Total ram usage:        7 bytes
   606 ;; Hardware stack levels used:    1
   607 ;; This function calls:
   608 ;;		Nothing
   609 ;; This function is called by:
   610 ;;		_display
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614                           
   615                           ;psect for function ___awmod
   616  06CA                     ___awmod:	
   617                           
   618                           ;incstack = 0
   619                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   620  06CA  01F6               	clrf	___awmod@sign
   621  06CB  1FF3               	btfss	___awmod@dividend+1,7
   622  06CC  2ED4               	goto	l752
   623  06CD  09F2               	comf	___awmod@dividend,f
   624  06CE  09F3               	comf	___awmod@dividend+1,f
   625  06CF  0AF2               	incf	___awmod@dividend,f
   626  06D0  1903               	skipnz
   627  06D1  0AF3               	incf	___awmod@dividend+1,f
   628  06D2  01F6               	clrf	___awmod@sign
   629  06D3  0AF6               	incf	___awmod@sign,f
   630  06D4                     l752:	
   631  06D4  1FF1               	btfss	___awmod@divisor+1,7
   632  06D5  2EDB               	goto	l756
   633  06D6  09F0               	comf	___awmod@divisor,f
   634  06D7  09F1               	comf	___awmod@divisor+1,f
   635  06D8  0AF0               	incf	___awmod@divisor,f
   636  06D9  1903               	skipnz
   637  06DA  0AF1               	incf	___awmod@divisor+1,f
   638  06DB                     l756:	
   639  06DB  0870               	movf	___awmod@divisor,w
   640  06DC  0471               	iorwf	___awmod@divisor+1,w
   641  06DD  1903               	btfsc	3,2
   642  06DE  2F08               	goto	l774
   643  06DF  01F5               	clrf	___awmod@counter
   644  06E0  0AF5               	incf	___awmod@counter,f
   645  06E1                     l764:	
   646  06E1  1BF1               	btfsc	___awmod@divisor+1,7
   647  06E2  2EEF               	goto	l766
   648  06E3  3001               	movlw	1
   649  06E4                     u485:	
   650  06E4  1003               	clrc
   651  06E5  0DF0               	rlf	___awmod@divisor,f
   652  06E6  0DF1               	rlf	___awmod@divisor+1,f
   653  06E7  3EFF               	addlw	-1
   654  06E8  1D03               	skipz
   655  06E9  2EE4               	goto	u485
   656  06EA  3001               	movlw	1
   657  06EB  00F4               	movwf	??___awmod
   658  06EC  0874               	movf	??___awmod,w
   659  06ED  07F5               	addwf	___awmod@counter,f
   660  06EE  2EE1               	goto	l764
   661  06EF                     l766:	
   662  06EF  0871               	movf	___awmod@divisor+1,w
   663  06F0  0273               	subwf	___awmod@dividend+1,w
   664  06F1  1D03               	skipz
   665  06F2  2EF5               	goto	u505
   666  06F3  0870               	movf	___awmod@divisor,w
   667  06F4  0272               	subwf	___awmod@dividend,w
   668  06F5                     u505:	
   669  06F5  1C03               	skipc
   670  06F6  2EFD               	goto	l770
   671  06F7  0870               	movf	___awmod@divisor,w
   672  06F8  02F2               	subwf	___awmod@dividend,f
   673  06F9  0871               	movf	___awmod@divisor+1,w
   674  06FA  1C03               	skipc
   675  06FB  03F3               	decf	___awmod@dividend+1,f
   676  06FC  02F3               	subwf	___awmod@dividend+1,f
   677  06FD                     l770:	
   678  06FD  3001               	movlw	1
   679  06FE                     u515:	
   680  06FE  1003               	clrc
   681  06FF  0CF1               	rrf	___awmod@divisor+1,f
   682  0700  0CF0               	rrf	___awmod@divisor,f
   683  0701  3EFF               	addlw	-1
   684  0702  1D03               	skipz
   685  0703  2EFE               	goto	u515
   686  0704  3001               	movlw	1
   687  0705  02F5               	subwf	___awmod@counter,f
   688  0706  1D03               	btfss	3,2
   689  0707  2EEF               	goto	l766
   690  0708                     l774:	
   691  0708  0876               	movf	___awmod@sign,w
   692  0709  1903               	btfsc	3,2
   693  070A  2F10               	goto	l778
   694  070B  09F2               	comf	___awmod@dividend,f
   695  070C  09F3               	comf	___awmod@dividend+1,f
   696  070D  0AF2               	incf	___awmod@dividend,f
   697  070E  1903               	skipnz
   698  070F  0AF3               	incf	___awmod@dividend+1,f
   699  0710                     l778:	
   700  0710  0873               	movf	___awmod@dividend+1,w
   701  0711  00F1               	movwf	?___awmod+1
   702  0712  0872               	movf	___awmod@dividend,w
   703  0713  00F0               	movwf	?___awmod
   704  0714  0008               	return
   705  0715                     __end_of___awmod:	
   706                           
   707                           	psect	text3
   708  0715                     __ptext3:	
   709 ;; *************** function ___awdiv *****************
   710 ;; Defined at:
   711 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  divisor         2    0[COMMON] int 
   714 ;;  dividend        2    2[COMMON] int 
   715 ;; Auto vars:     Size  Location     Type
   716 ;;  quotient        2    7[COMMON] int 
   717 ;;  sign            1    6[COMMON] unsigned char 
   718 ;;  counter         1    5[COMMON] unsigned char 
   719 ;; Return value:  Size  Location     Type
   720 ;;                  2    0[COMMON] int 
   721 ;; Registers used:
   722 ;;		wreg, status,2, status,0
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   728 ;;      Params:         4       0       0       0       0
   729 ;;      Locals:         4       0       0       0       0
   730 ;;      Temps:          1       0       0       0       0
   731 ;;      Totals:         9       0       0       0       0
   732 ;;Total ram usage:        9 bytes
   733 ;; Hardware stack levels used:    1
   734 ;; This function calls:
   735 ;;		Nothing
   736 ;; This function is called by:
   737 ;;		_display
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           
   742                           ;psect for function ___awdiv
   743  0715                     ___awdiv:	
   744                           
   745                           ;incstack = 0
   746                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   747  0715  01F6               	clrf	___awdiv@sign
   748  0716  1FF1               	btfss	___awdiv@divisor+1,7
   749  0717  2F1F               	goto	l708
   750  0718  09F0               	comf	___awdiv@divisor,f
   751  0719  09F1               	comf	___awdiv@divisor+1,f
   752  071A  0AF0               	incf	___awdiv@divisor,f
   753  071B  1903               	skipnz
   754  071C  0AF1               	incf	___awdiv@divisor+1,f
   755  071D  01F6               	clrf	___awdiv@sign
   756  071E  0AF6               	incf	___awdiv@sign,f
   757  071F                     l708:	
   758  071F  1FF3               	btfss	___awdiv@dividend+1,7
   759  0720  2F2A               	goto	l714
   760  0721  09F2               	comf	___awdiv@dividend,f
   761  0722  09F3               	comf	___awdiv@dividend+1,f
   762  0723  0AF2               	incf	___awdiv@dividend,f
   763  0724  1903               	skipnz
   764  0725  0AF3               	incf	___awdiv@dividend+1,f
   765  0726  3001               	movlw	1
   766  0727  00F4               	movwf	??___awdiv
   767  0728  0874               	movf	??___awdiv,w
   768  0729  06F6               	xorwf	___awdiv@sign,f
   769  072A                     l714:	
   770  072A  01F7               	clrf	___awdiv@quotient
   771  072B  01F8               	clrf	___awdiv@quotient+1
   772  072C  0870               	movf	___awdiv@divisor,w
   773  072D  0471               	iorwf	___awdiv@divisor+1,w
   774  072E  1903               	btfsc	3,2
   775  072F  2F61               	goto	l736
   776  0730  01F5               	clrf	___awdiv@counter
   777  0731  0AF5               	incf	___awdiv@counter,f
   778  0732                     l724:	
   779  0732  1BF1               	btfsc	___awdiv@divisor+1,7
   780  0733  2F40               	goto	l726
   781  0734  3001               	movlw	1
   782  0735                     u385:	
   783  0735  1003               	clrc
   784  0736  0DF0               	rlf	___awdiv@divisor,f
   785  0737  0DF1               	rlf	___awdiv@divisor+1,f
   786  0738  3EFF               	addlw	-1
   787  0739  1D03               	skipz
   788  073A  2F35               	goto	u385
   789  073B  3001               	movlw	1
   790  073C  00F4               	movwf	??___awdiv
   791  073D  0874               	movf	??___awdiv,w
   792  073E  07F5               	addwf	___awdiv@counter,f
   793  073F  2F32               	goto	l724
   794  0740                     l726:	
   795  0740  3001               	movlw	1
   796  0741                     u405:	
   797  0741  1003               	clrc
   798  0742  0DF7               	rlf	___awdiv@quotient,f
   799  0743  0DF8               	rlf	___awdiv@quotient+1,f
   800  0744  3EFF               	addlw	-1
   801  0745  1D03               	skipz
   802  0746  2F41               	goto	u405
   803  0747  0871               	movf	___awdiv@divisor+1,w
   804  0748  0273               	subwf	___awdiv@dividend+1,w
   805  0749  1D03               	skipz
   806  074A  2F4D               	goto	u415
   807  074B  0870               	movf	___awdiv@divisor,w
   808  074C  0272               	subwf	___awdiv@dividend,w
   809  074D                     u415:	
   810  074D  1C03               	skipc
   811  074E  2F56               	goto	l732
   812  074F  0870               	movf	___awdiv@divisor,w
   813  0750  02F2               	subwf	___awdiv@dividend,f
   814  0751  0871               	movf	___awdiv@divisor+1,w
   815  0752  1C03               	skipc
   816  0753  03F3               	decf	___awdiv@dividend+1,f
   817  0754  02F3               	subwf	___awdiv@dividend+1,f
   818  0755  1477               	bsf	___awdiv@quotient,0
   819  0756                     l732:	
   820  0756  3001               	movlw	1
   821  0757                     u425:	
   822  0757  1003               	clrc
   823  0758  0CF1               	rrf	___awdiv@divisor+1,f
   824  0759  0CF0               	rrf	___awdiv@divisor,f
   825  075A  3EFF               	addlw	-1
   826  075B  1D03               	skipz
   827  075C  2F57               	goto	u425
   828  075D  3001               	movlw	1
   829  075E  02F5               	subwf	___awdiv@counter,f
   830  075F  1D03               	btfss	3,2
   831  0760  2F40               	goto	l726
   832  0761                     l736:	
   833  0761  0876               	movf	___awdiv@sign,w
   834  0762  1903               	btfsc	3,2
   835  0763  2F69               	goto	l740
   836  0764  09F7               	comf	___awdiv@quotient,f
   837  0765  09F8               	comf	___awdiv@quotient+1,f
   838  0766  0AF7               	incf	___awdiv@quotient,f
   839  0767  1903               	skipnz
   840  0768  0AF8               	incf	___awdiv@quotient+1,f
   841  0769                     l740:	
   842  0769  0878               	movf	___awdiv@quotient+1,w
   843  076A  00F1               	movwf	?___awdiv+1
   844  076B  0877               	movf	___awdiv@quotient,w
   845  076C  00F0               	movwf	?___awdiv
   846  076D  0008               	return
   847  076E                     __end_of___awdiv:	
   848                           
   849                           	psect	text4
   850  063D                     __ptext4:	
   851 ;; *************** function _Seven_Segment *****************
   852 ;; Defined at:
   853 ;;		line 47 in file "C:/Users/systematic/Documents/embedded_project/XC8/mine/shift_register/SHIFT.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  x               1    wreg     unsigned char 
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  x               1    0[COMMON] unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      unsigned char 
   860 ;; Registers used:
   861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   867 ;;      Params:         0       0       0       0       0
   868 ;;      Locals:         1       0       0       0       0
   869 ;;      Temps:          0       0       0       0       0
   870 ;;      Totals:         1       0       0       0       0
   871 ;;Total ram usage:        1 bytes
   872 ;; Hardware stack levels used:    2
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_display
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           
   881                           ;psect for function _Seven_Segment
   882  063D                     _Seven_Segment:	
   883                           
   884                           ;incstack = 0
   885                           ; Regs used in _Seven_Segment: [wreg-fsr0h+status,2+status,0+pclath]
   886                           ;Seven_Segment@x stored from wreg
   887  063D  00F0               	movwf	Seven_Segment@x
   888                           
   889                           ;SHIFT.c: 48: return SEGMENT_COMMONA[x];
   890  063E  0870               	movf	Seven_Segment@x,w
   891  063F  3E01               	addlw	low ((_SEGMENT_COMMONA-__stringbase)| (0+32768))
   892  0640  0084               	movwf	4
   893  0641  120A  118A  2003   	fcall	stringdir
   894  0644  0008               	return
   895  0645                     __end_of_Seven_Segment:	
   896                           
   897                           	psect	text5
   898  0673                     __ptext5:	
   899 ;; *************** function _Serial_write *****************
   900 ;; Defined at:
   901 ;;		line 33 in file "C:/Users/systematic/Documents/embedded_project/XC8/mine/shift_register/SHIFT.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  value           1    wreg     unsigned char 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  value           1    6[COMMON] unsigned char 
   906 ;;  i               1    8[COMMON] unsigned char 
   907 ;;  bitsent         1    7[COMMON] unsigned char 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  1    wreg      void 
   910 ;; Registers used:
   911 ;;		wreg, status,2, status,0, pclath, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   917 ;;      Params:         0       0       0       0       0
   918 ;;      Locals:         3       0       0       0       0
   919 ;;      Temps:          4       0       0       0       0
   920 ;;      Totals:         7       0       0       0       0
   921 ;;Total ram usage:        7 bytes
   922 ;; Hardware stack levels used:    1
   923 ;; Hardware stack levels required when called:    1
   924 ;; This function calls:
   925 ;;		_clock
   926 ;; This function is called by:
   927 ;;		_display
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           
   932                           ;psect for function _Serial_write
   933  0673                     _Serial_write:	
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _Serial_write: [wreg+status,2+status,0+pclath+cstack]
   937                           ;Serial_write@value stored from wreg
   938  0673  00F6               	movwf	Serial_write@value
   939                           
   940                           ;SHIFT.c: 35: char bitsent;
   941                           ;SHIFT.c: 36: for(char i=0;i<8;i++){
   942  0674  01F8               	clrf	Serial_write@i
   943  0675                     L2:	
   944  0675  3008               	movlw	8
   945  0676  0278               	subwf	Serial_write@i,w
   946  0677  1803               	btfsc	3,0
   947  0678  0008               	return
   948                           
   949                           ;SHIFT.c: 38: bitsent = (value << i) & 0x80 ? 1 : 0;
   950  0679  0A78               	incf	Serial_write@i,w
   951  067A  00F2               	movwf	??_Serial_write
   952  067B  0876               	movf	Serial_write@value,w
   953  067C  00F3               	movwf	??_Serial_write+1
   954  067D  01F4               	clrf	??_Serial_write+2
   955  067E  2E82               	goto	u314
   956  067F                     u315:	
   957  067F  1003               	clrc
   958  0680  0DF3               	rlf	??_Serial_write+1,f
   959  0681  0DF4               	rlf	??_Serial_write+2,f
   960  0682                     u314:	
   961  0682  0BF2               	decfsz	??_Serial_write,f
   962  0683  2E7F               	goto	u315
   963  0684  1FF3               	btfss	??_Serial_write+1,7
   964  0685  2E88               	goto	u320
   965  0686  3001               	movlw	1
   966  0687  2E89               	goto	u330
   967  0688                     u320:	
   968  0688  3000               	movlw	0
   969  0689                     u330:	
   970  0689  00F5               	movwf	??_Serial_write+3
   971  068A  0875               	movf	??_Serial_write+3,w
   972  068B  00F7               	movwf	Serial_write@bitsent
   973                           
   974                           ;SHIFT.c: 40: PORTDbits.RD1 = bitsent;
   975  068C  0C77               	rrf	Serial_write@bitsent,w
   976  068D  1283               	bcf	3,5	;RP0=0, select bank0
   977  068E  1303               	bcf	3,6	;RP1=0, select bank0
   978  068F  1C03               	skipc
   979  0690  1088               	bcf	8,1	;volatile
   980  0691  1803               	skipnc
   981  0692  1488               	bsf	8,1	;volatile
   982                           
   983                           ;SHIFT.c: 41: clock();
   984  0693  120A  118A  265C  120A  118A  	fcall	_clock
   985  0698  3001               	movlw	1
   986  0699  00F2               	movwf	??_Serial_write
   987  069A  0872               	movf	??_Serial_write,w
   988  069B  07F8               	addwf	Serial_write@i,f
   989  069C  2E75               	goto	L2
   990  069D                     __end_of_Serial_write:	
   991                           
   992                           	psect	text6
   993  065C                     __ptext6:	
   994 ;; *************** function _clock *****************
   995 ;; Defined at:
   996 ;;		line 16 in file "C:/Users/systematic/Documents/embedded_project/XC8/mine/shift_register/SHIFT.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0
  1012 ;;      Temps:          2       0       0       0       0
  1013 ;;      Totals:         2       0       0       0       0
  1014 ;;Total ram usage:        2 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_Serial_write
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           
  1024                           ;psect for function _clock
  1025  065C                     _clock:	
  1026                           
  1027                           ;SHIFT.c: 17: PORTDbits.RD0 =1;
  1028                           
  1029                           ;incstack = 0
  1030                           ; Regs used in _clock: [wreg]
  1031  065C  1283               	bcf	3,5	;RP0=0, select bank0
  1032  065D  1303               	bcf	3,6	;RP1=0, select bank0
  1033  065E  1408               	bsf	8,0	;volatile
  1034                           
  1035                           ;SHIFT.c: 18: _delay((unsigned long)((1)*(20000000/4000.0)));
  1036  065F  3007               	movlw	7
  1037  0660  00F1               	movwf	??_clock+1
  1038  0661  307D               	movlw	125
  1039  0662  00F0               	movwf	??_clock
  1040  0663                     u597:	
  1041  0663  0BF0               	decfsz	??_clock,f
  1042  0664  2E63               	goto	u597
  1043  0665  0BF1               	decfsz	??_clock+1,f
  1044  0666  2E63               	goto	u597
  1045                           
  1046                           ;SHIFT.c: 19: PORTDbits.RD0 = 0;
  1047  0667  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0668  1303               	bcf	3,6	;RP1=0, select bank0
  1049  0669  1008               	bcf	8,0	;volatile
  1050                           
  1051                           ;SHIFT.c: 20: _delay((unsigned long)((1)*(20000000/4000.0)));
  1052  066A  3007               	movlw	7
  1053  066B  00F1               	movwf	??_clock+1
  1054  066C  307D               	movlw	125
  1055  066D  00F0               	movwf	??_clock
  1056  066E                     u607:	
  1057  066E  0BF0               	decfsz	??_clock,f
  1058  066F  2E6E               	goto	u607
  1059  0670  0BF1               	decfsz	??_clock+1,f
  1060  0671  2E6E               	goto	u607
  1061  0672  0008               	return
  1062  0673                     __end_of_clock:	
  1063                           
  1064                           	psect	text7
  1065  0645                     __ptext7:	
  1066 ;; *************** function _Latch *****************
  1067 ;; Defined at:
  1068 ;;		line 25 in file "C:/Users/systematic/Documents/embedded_project/XC8/mine/shift_register/SHIFT.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;		None
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1082 ;;      Params:         0       0       0       0       0
  1083 ;;      Locals:         0       0       0       0       0
  1084 ;;      Temps:          2       0       0       0       0
  1085 ;;      Totals:         2       0       0       0       0
  1086 ;;Total ram usage:        2 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; This function calls:
  1089 ;;		Nothing
  1090 ;; This function is called by:
  1091 ;;		_display
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           
  1096                           ;psect for function _Latch
  1097  0645                     _Latch:	
  1098                           
  1099                           ;SHIFT.c: 27: PORTDbits.RD2 =1;
  1100                           
  1101                           ;incstack = 0
  1102                           ; Regs used in _Latch: [wreg]
  1103  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1104  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0647  1508               	bsf	8,2	;volatile
  1106                           
  1107                           ;SHIFT.c: 28: _delay((unsigned long)((1)*(20000000/4000.0)));
  1108  0648  3007               	movlw	7
  1109  0649  00F1               	movwf	??_Latch+1
  1110  064A  307D               	movlw	125
  1111  064B  00F0               	movwf	??_Latch
  1112  064C                     u617:	
  1113  064C  0BF0               	decfsz	??_Latch,f
  1114  064D  2E4C               	goto	u617
  1115  064E  0BF1               	decfsz	??_Latch+1,f
  1116  064F  2E4C               	goto	u617
  1117                           
  1118                           ;SHIFT.c: 29: PORTDbits.RD2 = 0;
  1119  0650  1283               	bcf	3,5	;RP0=0, select bank0
  1120  0651  1303               	bcf	3,6	;RP1=0, select bank0
  1121  0652  1108               	bcf	8,2	;volatile
  1122                           
  1123                           ;SHIFT.c: 30: _delay((unsigned long)((1)*(20000000/4000.0)));
  1124  0653  3007               	movlw	7
  1125  0654  00F1               	movwf	??_Latch+1
  1126  0655  307D               	movlw	125
  1127  0656  00F0               	movwf	??_Latch
  1128  0657                     u627:	
  1129  0657  0BF0               	decfsz	??_Latch,f
  1130  0658  2E57               	goto	u627
  1131  0659  0BF1               	decfsz	??_Latch+1,f
  1132  065A  2E57               	goto	u627
  1133  065B  0008               	return
  1134  065C                     __end_of_Latch:	
  1135  007E                     btemp	set	126	;btemp
  1136  007E                     wtemp	set	126
  1137  007E                     wtemp0	set	126
  1138  0080                     wtemp1	set	128
  1139  0082                     wtemp2	set	130
  1140  0084                     wtemp3	set	132
  1141  0086                     wtemp4	set	134
  1142  0088                     wtemp5	set	136
  1143  007F                     wtemp6	set	127
  1144  007E                     ttemp	set	126
  1145  007E                     ttemp0	set	126
  1146  0081                     ttemp1	set	129
  1147  0084                     ttemp2	set	132
  1148  0087                     ttemp3	set	135
  1149  007F                     ttemp4	set	127
  1150  007E                     ltemp	set	126
  1151  007E                     ltemp0	set	126
  1152  0082                     ltemp1	set	130
  1153  0086                     ltemp2	set	134
  1154  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    20
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     20      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_display
    _display->_Serial_write
    _display->___awdiv
    _Serial_write->_clock

Critical Paths under _main in BANK0

    _main->_display

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1550
                                             17 BANK0      3     3      0
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                             22    19      3    1482
                                              9 COMMON     5     2      3
                                              0 BANK0     17    17      0
                              _Latch
                       _Serial_write
                      _Seven_Segment
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     424
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     428
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (3) _Seven_Segment                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Serial_write                                         7     7      0     113
                                              2 COMMON     7     7      0
                              _clock
 ---------------------------------------------------------------------------------
 (3) _clock                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Latch                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
     _Latch
     _Serial_write
       _clock
     _Seven_Segment
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      14       5       25.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sun Nov 18 05:59:44 2018

                      pc 0002              __CFG_CP$OFF 0000                       l41 06A3  
           ___awdiv@sign 0076                       fsr 0004           Seven_Segment@x 0070  
                    l800 07B0                      l714 072A                      l810 07CD  
                    l802 07C9                      l740 0769                      l732 0756  
                    l724 0732                      l708 071F                      l812 07F8  
                    l726 0740                      l736 0761                      l752 06D4  
                    l770 06FD                      l764 06E1                      l756 06DB  
                    l766 06EF                      l774 0708                      l792 0772  
                    l778 0710                      l794 07A7                      u320 0688  
                    u330 0689                      u314 0682                      u315 067F  
                    u405 0741                      u415 074D                      u425 0757  
                    u505 06F5             __CFG_CPD$OFF 0000                      u515 06FE  
                    u607 066E                      u617 064C                      u385 0735  
                    u627 0657                      u555 07B9                      u485 06E4  
                    u565 07D6                      u575 06B0                      u597 0663  
                    fsr0 0004                      indf 0000             ___awmod@sign 0076  
           __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000              display@data 002B  
           __CFG_WRT$OFF 0000                     _main 069D                     btemp 007E  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E                    ?_main 0070  
        __end_of___awdiv 076E            __CFG_WDTE$OFF 0000          __end_of___awmod 0715  
        ___awdiv@divisor 0070          ___awdiv@counter 0075                    _PORTD 0008  
                  _TRISD 0088                    _Latch 0645          __end_of_display 07FC  
                  _clock 065C                    main@x 0032                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 07FC  
           __end_of_main 06CA    __end_of_Seven_Segment 0645                   ??_main 0031  
                 ?_Latch 0070                   ?_clock 0070         ___awdiv@dividend 0072  
         __CFG_PWRTE$OFF 0000            display@number 0079                ??___awdiv 0074  
              ??___awmod 0074         ___awdiv@quotient 0077          ___awmod@divisor 0070  
        ___awmod@counter 0075                ??_display 007C          _SEGMENT_COMMONA 0009  
        _SEGMENT_COMMONC 0013  __end_of__initialization 07FC            __end_of_Latch 065C  
         __pcstackCOMMON 0070            __end_of_clock 0673                  ??_Latch 0070  
                ??_clock 0070            ?_Serial_write 0070               __pmaintext 069D  
__end_of_SEGMENT_COMMONA 0013  __end_of_SEGMENT_COMMONC 001D               __stringtab 0003  
         ??_Serial_write 0072                  ___awdiv 0715                  ___awmod 06CA  
         display@myarray 0020                  __ptext1 076E                  __ptext2 06CA  
                __ptext3 0715                  __ptext4 063D                  __ptext5 0673  
                __ptext6 065C                  __ptext7 0645                  _display 076E  
       ___awmod@dividend 0072            Serial_write@i 0078     end_of_initialization 07FC  
              _PORTDbits 0008   __size_of_Seven_Segment 0008               display@val 002A  
   __end_of_Serial_write 069D      start_initialization 07FC         display@displayno 007B  
          _Seven_Segment 063D                ___latbits 0002            __pcstackBANK0 0020  
               ?___awdiv 0070                 ?___awmod 0070           ?_Seven_Segment 0070  
              __pstrings 0003                 ?_display 0079           __size_of_Latch 0017  
         __size_of_clock 0017    __size_of_Serial_write 002A              __stringbase 0008  
           _Serial_write 0673          ??_Seven_Segment 0070         __size_of___awdiv 0059  
       __size_of___awmod 004B       __end_of__stringtab 0009         __size_of_display 008E  
          __size_of_main 002D                 display@i 0030                 display@j 002C  
               display@k 002E      Serial_write@bitsent 0077                stringcode 0003  
               stringdir 0003                 stringtab 0003        Serial_write@value 0076  
